// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id            String   @id @default(cuid())
  // ID del usuario en Neon Auth (Stack)
  stackUserId   String   @unique
  email         String   @unique
  displayName   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relación a roles
  roles UserRole[]
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  users      UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  roles RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId String
  roleId String

  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Cliente {
  id               String   @id @default(uuid())
  nombre           String
  ruc              String   @unique
  email            String?
  telefono         String?
  direccion        String?
  contactoNombre   String?
  contactoTelefono String?
  activo           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  cotizaciones     Cotizacion[]
}

enum ParamType {
  NUMBER
  PERCENT   // 0.15 => 15% (la UI lo muestra/edita como 15)
  CURRENCY
  TEXT
}

model CostingParam {
  id          String    @id @default(cuid())
  key         String    @unique
  label       String?
  group       String?   @default("cotizador") // ej: "costos", "márgenes", etc.
  type        ParamType
  valueNumber Decimal?  @db.Decimal(18,6)
  valueText   String?
  unit        String?   // PEN/h, %, kWh, etc.
  min         Decimal?  @db.Decimal(18,6)
  max         Decimal?  @db.Decimal(18,6)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
enum QuoteStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

model Cotizacion {
  id           String      @id @default(uuid())
  clienteId    String
  solicitudId  String?     // para integrar luego con módulo de Solicitudes (opcional)
  version      Int         @default(1)

  // Snapshot de parámetros
  currency     String
  giPct        Decimal     @db.Decimal(6,4)   // 0.15
  marginPct    Decimal     @db.Decimal(6,4)   // 0.20
  hourlyRate   Decimal     @db.Decimal(18,6)
  kwhRate      Decimal     @db.Decimal(18,6)
  deprPerHour  Decimal     @db.Decimal(18,6)
  toolingPerPc Decimal     @db.Decimal(18,6)
  rentPerHour  Decimal     @db.Decimal(18,6)

  // Entradas de usuario
  qty          Int         @default(1)
  materials    Decimal     @db.Decimal(18,2)  // S/.
  hours        Decimal     @db.Decimal(12,2)
  kwh          Decimal     @db.Decimal(12,2)  // si no aplica, 0

  // Totales calculados y desglose
  costDirect   Decimal     @db.Decimal(18,2)
  giAmount     Decimal     @db.Decimal(18,2)
  subtotal     Decimal     @db.Decimal(18,2)
  marginAmount Decimal     @db.Decimal(18,2)
  total        Decimal     @db.Decimal(18,2)
  unitPrice    Decimal     @db.Decimal(18,2)
  breakdown    Json

  status       QuoteStatus @default(DRAFT)
  validUntil   DateTime?
  notes        String?

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  cliente      Cliente     @relation(fields: [clienteId], references: [id])

  @@index([clienteId])
  @@index([status, createdAt])
}

enum CategoriaProducto {
  MATERIA_PRIMA
  HERRAMIENTA_CORTE
  CONSUMIBLE
  REPUESTO
}

enum TipoMovimiento {
  INGRESO_COMPRA
  INGRESO_AJUSTE
  SALIDA_AJUSTE
  SALIDA_OT
}

model Producto {
  sku         String            @id
  nombre      String
  categoria   CategoriaProducto
  uom         String            // unidad de medida (ISO o texto corto)
  costo       Decimal           @db.Decimal(12,2) // costo de referencia (último ingreso o estándar)
  stockMinimo Decimal?          @db.Decimal(12,3)

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  movimientos  Movimiento[]
}

model Movimiento {
  id            String        @id @default(uuid())
  productoId    String
  tipo          TipoMovimiento
  cantidad      Decimal       @db.Decimal(12,3) // ⚠️ Convención: salidas se guardan como NEGATIVO
  costoUnitario Decimal       @db.Decimal(12,2) // costo por unidad al momento del movimiento
  refTabla      String?
  refId         String?
  nota          String?
  fecha         DateTime      @default(now())

  producto      Producto      @relation(fields: [productoId], references: [sku])

  @@index([productoId, fecha])
}
