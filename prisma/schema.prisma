// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id            String   @id @default(cuid())
  // ID del usuario en Neon Auth (Stack)
  stackUserId   String   @unique
  email         String   @unique
  displayName   String?
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relación a roles
  roles UserRole[]

  solicitudesCompra SolicitudCompra[]
  partesProduccion  ParteProduccion[]
  maquinaEventos    MaquinaEvento[]

  authUserId  String?  @unique
  authUser    User?    @relation(fields: [authUserId], references: [id], onDelete: SetNull)
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  users      UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  roles RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId String
  roleId String

  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Cliente {
  id               String   @id @default(uuid())
  nombre           String
  ruc              String   @unique
  email            String?
  telefono         String?
  direccion        String?
  contactoNombre   String?
  contactoTelefono String?
  activo           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  cotizaciones     Cotizacion[]
  ordenesTrabajo   OrdenTrabajo[]
  reclamos         Reclamo[]
}

enum ParamType {
  NUMBER
  PERCENT   
  CURRENCY
  TEXT
}

model CostingParam {
  id          String    @id @default(cuid())
  key         String    @unique
  label       String?
  group       String?   @default("cotizador") // ej: "costos", "márgenes", etc.
  type        ParamType
  valueNumber Decimal?  @db.Decimal(18,6)
  valueText   String?
  unit        String?   // PEN/h, %, kWh, etc.
  min         Decimal?  @db.Decimal(18,6)
  max         Decimal?  @db.Decimal(18,6)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modelo para costos diferenciados por categoría de máquina
model MachineCostingCategory {
  id            String   @id @default(cuid())
  categoria     String   @unique // "TORNO PARALELO", "TORNO CNC", "FRESADORA", etc.
  laborCost     Decimal  @db.Decimal(18,6) // Costo mano de obra USD/hora
  deprPerHour   Decimal  @db.Decimal(18,6) // Depreciación USD/hora
  descripcion   String?
  activo        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cotizaciones  Cotizacion[] // Relación inversa

  @@index([activo])
}

enum QuoteStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
}

model Cotizacion {
  id           String      @id @default(uuid())
  clienteId    String
  solicitudId  String?     // para integrar luego con módulo de Solicitudes (opcional)
  version      Int         @default(1)

  // Snapshot de parámetros
  currency     String
  giPct        Decimal     @db.Decimal(6,4)   // 0.15
  marginPct    Decimal     @db.Decimal(6,4)   // 0.20
  hourlyRate   Decimal     @db.Decimal(18,6)
  kwhRate      Decimal     @db.Decimal(18,6)
  deprPerHour  Decimal     @db.Decimal(18,6)
  toolingPerPc Decimal     @db.Decimal(18,6)
  rentPerHour  Decimal     @db.Decimal(18,6)

  // Entradas de usuario
  qty          Int         @default(1)
  materials    Decimal     @db.Decimal(18,2)  // S/.
  hours        Decimal     @db.Decimal(12,2)
  kwh          Decimal?    @db.Decimal(12,2)  // obsolete field, kept for backward compatibility

  // Totales calculados y desglose
  costDirect   Decimal     @db.Decimal(18,2)
  giAmount     Decimal     @db.Decimal(18,2)
  subtotal     Decimal     @db.Decimal(18,2)
  marginAmount Decimal     @db.Decimal(18,2)
  total        Decimal     @db.Decimal(18,2)
  unitPrice    Decimal     @db.Decimal(18,2)
  breakdown    Json

  status         QuoteStatus @default(DRAFT)
  validUntil     DateTime?
  notes          String?
  pedidoReferencia String?   // Referencia de pedido ERP

  tipoTrabajoId  String?     // Tipo de trabajo seleccionado
  tipoTrabajo    ConfiguracionCatalogo? @relation(fields: [tipoTrabajoId], references: [id], onDelete: SetNull)

  machineCategoryId String?  // Categoría de máquina para costos diferenciados
  machineCategory   MachineCostingCategory? @relation(fields: [machineCategoryId], references: [id], onDelete: SetNull)

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  cliente      Cliente     @relation(fields: [clienteId], references: [id])
  ordenesTrabajo OrdenTrabajo[]

  @@index([clienteId])
  @@index([status, createdAt])
}

enum CategoriaProducto {
  MATERIA_PRIMA
  HERRAMIENTA_CORTE
  CONSUMIBLE
  REPUESTO
  FABRICACION
}

enum TipoMovimiento {
  INGRESO_COMPRA
  INGRESO_AJUSTE
  SALIDA_AJUSTE
  SALIDA_OT
  INGRESO_OT
}

model Producto {
  sku         String            @id
  nombre      String
  categoria   CategoriaProducto
  uom         String            
  costo       Decimal           @db.Decimal(12,2) 
  stockMinimo Decimal?          @db.Decimal(12,3)

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  movimientos  Movimiento[]
  scItems      SCItem[]
  ocItems      OCItem[]
  otMateriales OTMaterial[]
  otPiezas     OTPieza[]
  codigosEquivalentes ProductoCodigoEquivalente[]

  @@index([nombre])
}

/// Códigos equivalentes de productos para integrar con ERP/sistemas externos
model ProductoCodigoEquivalente {
  id          String   @id @default(uuid())
  productoId  String
  sistema     String
  codigo      String
  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  producto    Producto @relation(fields: [productoId], references: [sku], onDelete: Cascade)

  @@index([productoId])
  @@unique([sistema, codigo])
}

model Movimiento {
  id            String        @id @default(uuid())
  productoId    String
  tipo          TipoMovimiento
  cantidad      Decimal       @db.Decimal(12,3) 
  costoUnitario Decimal       @db.Decimal(12,2) 
  refTabla      String?
  refId         String?
  nota          String?
  fecha         DateTime      @default(now())

  producto      Producto      @relation(fields: [productoId], references: [sku])

  @@index([productoId, fecha])
  @@index([refTabla, refId, fecha])
  @@index([fecha])
  @@index([tipo, fecha])
}
enum EstadoSC {
  PENDING_ADMIN
  PENDING_GERENCIA
  APPROVED
  REJECTED
  CANCELLED
}

enum EstadoOC {
  OPEN
  PARTIAL
  RECEIVED
  CLOSED
  CANCELLED
}

model Proveedor {
  id        String        @id @default(uuid())
  nombre    String
  ruc       String        @unique
  contacto  String?
  email     String?
  telefono  String?
  direccion String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  ordenes   OrdenCompra[]
}

model SolicitudCompra {
  id            String      @id @default(uuid())
  solicitanteId String
  otId          String?
  estado        EstadoSC    @default(PENDING_ADMIN)
  totalEstimado Decimal?    @db.Decimal(12,2)
  notas         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  solicitante   UserProfile @relation(fields: [solicitanteId], references: [id])
  items         SCItem[]
 
  ordenesCompra OrdenCompra[]

  ot            OrdenTrabajo? @relation(fields: [otId], references: [id], onDelete: SetNull)

  @@index([estado, createdAt])
  @@index([otId])
}

model SCItem {
  id            String   @id @default(uuid())
  scId          String
  productoId    String   // Producto.sku
  cantidad      Decimal  @db.Decimal(12,3)
  costoEstimado Decimal? @db.Decimal(12,2)

  solicitudCompra SolicitudCompra @relation(fields: [scId], references: [id])
  producto        Producto        @relation(fields: [productoId], references: [sku])
  ocItems         OCItem[]

  @@index([scId])
}

model OrdenCompra {
  id            String     @id @default(uuid())
  scId          String
  proveedorId   String
  codigo        String     @unique
  estado        EstadoOC   @default(OPEN)
  total         Decimal    @db.Decimal(12,2)
  facturaUrl    String?
  fecha         DateTime   @default(now())

  solicitudCompra SolicitudCompra @relation(fields: [scId], references: [id])
  proveedor       Proveedor       @relation(fields: [proveedorId], references: [id])
  items           OCItem[]

  @@index([estado, fecha])
  @@index([scId, fecha])
}

model OCItem {
  id            String  @id @default(uuid())
  ocId          String
  productoId    String  // Producto.sku
  cantidad      Decimal @db.Decimal(12,3)
  costoUnitario Decimal @db.Decimal(12,2)

  scItemId      String?
  scItem        SCItem?   @relation(fields: [scItemId], references: [id])

  ordenCompra   OrdenCompra @relation(fields: [ocId], references: [id])
  producto      Producto    @relation(fields: [productoId], references: [sku])

  @@index([ocId])
  @@index([scItemId])
  @@index([productoId])
}

enum EstadoOT {
  DRAFT
  OPEN
  IN_PROGRESS
  DONE
  CANCELLED
}

enum PrioridadOT {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model OrdenTrabajo {
  id            String     @id @default(uuid())
  codigo        String     @unique
  estado        EstadoOT   @default(DRAFT)
  prioridad     PrioridadOT @default(MEDIUM)
  clienteId     String?
  cotizacionId  String?
  notas         String?
  acabado       String?
  fechaLimite   DateTime?
  creadaEn      DateTime   @default(now())
  actualizadaEn DateTime   @updatedAt

  // --- NUEVO: snapshot de la cotización ---
  currency            String    @default("PEN")
  costQuoteMaterials  Decimal?  @db.Decimal(18,2)
  costQuoteLabor      Decimal?  @db.Decimal(18,2)
  costQuoteOverheads  Decimal?  @db.Decimal(18,2)
  costQuoteTotal      Decimal?  @db.Decimal(18,2)

  // --- NUEVO: costos reales acumulados de la OT ---
  costMaterials       Decimal   @db.Decimal(18,2) @default(0)  // de SALIDA_OT
  costLabor           Decimal   @db.Decimal(18,2) @default(0)  // horas * tarifa
  costOverheads       Decimal   @db.Decimal(18,2) @default(0)  // depreciación, alquiler, tooling, etc.
  costTotal           Decimal   @db.Decimal(18,2) @default(0)  // suma de los anteriores

  // --- NUEVO: snapshot de parámetros de costeo usados ---
  costParams          Json?

  cliente          Cliente?         @relation(fields: [clienteId], references: [id])
  cotizacion       Cotizacion?      @relation(fields: [cotizacionId], references: [id])
  materiales       OTMaterial[]
  piezas           OTPieza[]
  partesProduccion ParteProduccion[]
  solicitudesCompra SolicitudCompra[]
  maquinaEventos   MaquinaEvento[]
  reclamo          Reclamo?
  reclamosReferencia Reclamo[]   @relation("ReclamoOTReferencia")

  @@index([estado, creadaEn])
  @@index([creadaEn])
}

model OTPieza {
  id         String       @id @default(uuid())
  otId       String
  productoId String?
  descripcion String?
  qtyPlan    Decimal      @db.Decimal(12,3)
  qtyHecha   Decimal      @db.Decimal(12,3) @default(0)

  ot               OrdenTrabajo      @relation(fields: [otId], references: [id])
  producto         Producto?         @relation(fields: [productoId], references: [sku])
  partesProduccion ParteProduccion[]

  @@index([otId])
}

model OTMaterial {
  id        String   @id @default(uuid())
  otId      String
  productoId String
  qtyPlan   Decimal  @db.Decimal(12,3)
  qtyEmit   Decimal  @db.Decimal(12,3) @default(0)

  ot        OrdenTrabajo @relation(fields: [otId], references: [id])
  producto  Producto     @relation(fields: [productoId], references: [sku])

  @@unique([otId, productoId])
  @@index([otId])
}
model ParteProduccion {
  id       String      @id @default(uuid())
  otId     String
  userId   String
  horas    Decimal     @db.Decimal(10,2)
  maquina  String?
  nota     String?
  fecha    DateTime    @default(now())

  piezaId    String?
  qtyBuenas  Decimal?    @db.Decimal(12,3) @default(0)
  qtyScrap   Decimal?    @db.Decimal(12,3) @default(0)
  motivoScrap String?

  ot         OrdenTrabajo @relation(fields: [otId], references: [id])
  usuario    UserProfile  @relation(fields: [userId], references: [id])
  pieza      OTPieza?     @relation(fields: [piezaId], references: [id])

  @@index([otId, fecha])
  @@index([piezaId])
  @@index([fecha])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  // 🔗 Bridge opcional hacia tu perfil de dominio
  profile       UserProfile?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum TipoCatalogo {
  // Productos e Inventario
  UNIDAD_MEDIDA          // m, kg, pz, etc.
  CATEGORIA_PRODUCTO     // Reemplazar enum CategoriaProducto
  TIPO_MOVIMIENTO        // Reemplazar enum TipoMovimiento
  
  // Ordenes de Trabajo
  ESTADO_OT              // Reemplazar enum EstadoOT
  PRIORIDAD_OT          // Reemplazar enum PrioridadOT
  TIPO_ACABADO          // Pintado, Cromado, etc.
  
  // Máquinas
  ESTADO_MAQUINA        // Reemplazar enum MaquinaEstado
  EVENTO_MAQUINA        // Reemplazar enum MaquinaEventoTipo
  CATEGORIA_MAQUINA     // Torno, Fresadora, etc.
  TIPO_MANTENIMIENTO    // Preventivo, Correctivo, etc.
  ESTADO_MANTENIMIENTO  // Pendiente, Completado, etc.
  
  // Compras
  ESTADO_SC             // Reemplazar enum EstadoSC
  ESTADO_OC             // Reemplazar enum EstadoOC
  
  // Cotizaciones
  ESTADO_COTIZACION     // Reemplazar enum QuoteStatus
  MONEDA                // PEN, USD, EUR
  TIPO_PARAMETRO        // Reemplazar enum ParamType
  TIPO_TRABAJO          // Fabricación, Transformación, Rectificación, Servicios
}

model ConfiguracionCatalogo {
  id          String      @id @default(uuid())
  tipo        TipoCatalogo
  codigo      String      // Código único dentro del tipo
  nombre      String      // Nombre mostrado al usuario
  descripcion String?
  orden       Int         @default(0)
  activo      Boolean     @default(true)
  color       String?     // Para UI (badges, estados)
  icono       String?     // Para UI
  
  // Metadatos adicionales
  propiedades Json?       // Para casos especiales
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relaciones
  cotizaciones Cotizacion[]

  @@unique([tipo, codigo])
  @@index([tipo, activo, orden])
}

enum MaquinaEstado {
  ACTIVA
  MANTENIMIENTO
  BAJA
}

enum MaquinaEventoTipo {
  USO
  PARO
  MANTENIMIENTO
  AVERIA
  DISPONIBLE
}

model Maquina {
  id          String   @id @default(uuid())
  codigo      String   @unique
  nombre      String
  categoria   String?
  estado      MaquinaEstado @default(ACTIVA)
  ubicacion   String?
  fabricante  String?
  modelo      String?
  serie       String?
  capacidad   String?
  notas       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventos         MaquinaEvento[]
  mantenimientos  MaquinaMantenimiento[]
}

model MaquinaEvento {
  id        String   @id @default(uuid())
  maquinaId String
  maquina   Maquina  @relation(fields: [maquinaId], references: [id], onDelete: Cascade)

  tipo      MaquinaEventoTipo
  inicio    DateTime @default(now())
  fin       DateTime?
  horas     Decimal  @default(0)
  nota      String?

  otId      String?
  ot        OrdenTrabajo? @relation(fields: [otId], references: [id], onDelete: SetNull)

  userId    String?
  usuario   UserProfile? @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([maquinaId, inicio])
  @@index([otId])
}

model MaquinaMantenimiento {
  id         String   @id @default(uuid())
  maquinaId  String
  maquina    Maquina  @relation(fields: [maquinaId], references: [id], onDelete: Cascade)

  tipo       String   // PREVENTIVO / CORRECTIVO / CALIBRACION, etc.
  estado     String   // PENDIENTE / EN_PROCESO / COMPLETADO
  fechaProg  DateTime
  fechaReal  DateTime?
  costo      Decimal  @default(0)
  nota       String?
  createdAt  DateTime @default(now())

  @@index([maquinaId])
  @@index([estado])
}

enum TipoReclamo {
  OT_ATENDIDA     // Reclamo sobre una OT ya atendida
  NUEVO_RECLAMO   // Nuevo reclamo por otros motivos
}

enum TipoResolucion {
  OT_PENDIENTE    // Regresar la OT a pendiente para rectificación
  OT_NUEVA        // Crear nueva OT
  REEMBOLSO       // Reembolso al cliente
  AJUSTE_STOCK    // Ajuste en inventario
  OTRO            // Otra resolución
}

enum EstadoReclamo {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CONVERTED_TO_OT
}

enum PrioridadReclamo {
  BAJA
  MEDIA
  ALTA
  URGENTE
}

model Reclamo {
  id            String          @id @default(uuid())
  codigo        String?         @unique // Código único automático REC-2024-001
  clienteId     String
  titulo        String
  descripcion   String
  prioridad     PrioridadReclamo @default(MEDIA)
  estado        EstadoReclamo    @default(PENDING)
  categoria     String?
  archivos      String[]        // URLs de archivos adjuntos
  
  // Tipo de reclamo
  tipoReclamo   TipoReclamo
  
  // Si es reclamo sobre OT atendida
  otReferenciaId String?        // ID de la OT original
  
  // Resolución cuando se aprueba
  tipoResolucion TipoResolucion?
  
  // Si se convierte en OT (para rectificación o nueva)
  otId          String?         @unique
  
  cliente       Cliente         @relation(fields: [clienteId], references: [id])
  ot            OrdenTrabajo?   @relation(fields: [otId], references: [id])
  otReferencia  OrdenTrabajo?   @relation("ReclamoOTReferencia", fields: [otReferenciaId], references: [id])
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([clienteId])
  @@index([estado])
  @@index([otReferenciaId])
}
